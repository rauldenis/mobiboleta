/** 
  * This polish.css file contains all
  * design information about this project.
  * It can be customized for specific devices
  * or device groups by putting it in the 
  * appropriate sub-folder or by using preprocessing.
  *
  * If you want to adjust a design for all
  * Nokia devices, define it in "resources/Nokia/polish.css"
  * and so on. Only new and different settings
  * need to be specified in such polish.css files, this means that
  * styles inherit all attributes of their "parent" style.
  *
  * For customizations of the base style, use 
  * resources/customization1/polish.css, for example.
  */

/**
  * the colors which are defined in
  * the colors section can later be referenced.
  * This makes changes easy, since the color
  * just needs to be changed in one position.
  * Even default colors (like blue, green, lime, etc)
  * can be changed here. 
  *
  * Tip: use names that describe their meaning, not names that describe the color:
  * Good name: backgroundColor
  * Bad name:  lightGreen
  * This allows you to change the design later onwards without ending up with
  * color definitions like "lightGreen: red;".
  */
colors {
    joeyGreen: #B5D623;
    fontColor: #ccc;
	focusedFontColor: #000;
	bgColor:  #222;
	focusedBgColor:  #ee4;
	borderColor: fontColor;
	focusedBorderColor: focusedFontColor;
	
        textColor: white;
	screenBackgroundColor: #333;	
}
.mytes{
    left: 0px;
    right: 0px;
}

/** 
  * When you use the same background several times,
  * you can design it in the backgrounds section.
  * In this case only one instance of the background
  * is used, which reduces the memory footprint.
  */
backgrounds {
	/**
	screenBackgroundPri {
        //#if polish.midp2
			type: scaling-image;
		//#endif
	image: url( imgfondo.png );	
        color: #000;
        scale-mode: proportional;
	anchor: horizontal-center | vertical-center;
        
	}
	**/
}

/** 
  * When you use the same border several times,
  * you can design it in the borders section.
  * In this case only one instance of the border
  * is used, which reduces the memory footprint.
  */
borders {
	/* sample:
	focusedBorder {
		type: round-rect;
		color: focusedBorderColor;
	}
	*/
}



/**
  * The title style is a predefined style which is used
  * for all screen-titles unless you specify a 'title-style' attribute within a screen style.
  */
title {
	margin: 2;
	padding: 2;
	padding-top: 12;
	padding-bottom: 12;
	padding-right: 8;
	font-face: proportional;
	font-size: large;
	font-style: bold;
	font-color: #fff;
	layout: center | expand;
	text-effect: split;
	text-split-bottom-color: #ddd;
	background {
		type: round-rect-split;
		top-color: #073b46;
		bottom-color: #042931;
		split-pos: 50%;
		arc-width: 8;
		arc-height: 8;
	}
}


/*********************   MAIN MENU   ******************************************************************************************************/
.screenMainMenu {
	background-color: screenBackgroundColor;
	layout: vertical-center;
        /**background: screenBackgroundPri;**/
}

.itemMainMenuEntry {
	margin-left: 5%;
	margin-right: 5%;
	font-color: fontColor;
	layout: expand | center;
}

.itemMainMenuEntry:hover {
	background-color: focusedBgColor;
	font-color: focusedFontColor;	
}

/*********************   SCROLL BAR   ******************************************************************************************************/
/* You need to activate the scrollbar by setting the "polish.useScrollBar" variable to "true" in your build.xml script. */
scrollbar {
	scrollbar-slider-color: #333;
	scrollbar-slider-width: 3;
}

/*********************   MENU BAR     *******************************************************************************************************/
/* You need to activate the extended menubar that allows this finetuned design by setting the 
   "polish.MenuBar.useExtendedMenuBar" variable to "true" in your build.xml script. */

menubar
{
	padding-top: 3px;
	padding: 2px;
	background-color: bgColor;
}

menu {
	margin-left: 2px;
	margin-right: 2px;
	min-width: 60%;
	padding: 2px;
	background {
		type: round-rect;
		color: focusedBgColor;
		border-width: 2;
		border-color: bgColor;
	}
        
}

/** Style for the first layer of subcommands: **/
menu1 extends menu {
	background-color: argb(150, 255, 255, 0 );
	background-type: simple;
      layout: right;
      margin-bottom: 4px;
      margin-right: 4px;
}


/**
  * The menuItem style is a predefined style
  * for the actual commands in a fullscreen-menu.
  * When the menuItem style is not defined,
  * the menu style will be used instead. 
  */
menuItem {
	margin-top: 2px;
	padding: 2px;
	padding-left: 5px;
	font {
		color: fontColor;
		size: medium;
		style: bold;
	}
	layout: left;
	/**
	 * Yes, it's possible to use preprocessing within CSS files. Use any preprocessing
	 * variables like polish.midp2 or polish.api.nokia-ui. You can also access resource
	 * information using these property functions:
	 * - exists( resourcename ): checks whether a resource is defined for the current target device
	 * - imagewidth( imagename ): retrieves the width of the given image
	 * - imageheight( imagename ): retrieves the height of the given image
	 */
	//#if ${ exists( arrowRight.png ) }
		command-child-indicator: url(arrowRight.png);
	//#else
		command-child-indicator-color: blue;
		command-child-indicator-width: 8;
		command-child-indicator-height: 10;
	//#endif
}

.menuItem:hover {
	background-color: bgColor;
	font-color: focusedFontColor;
	layout: left | horizontal-expand;
}

leftcommand
{
	margin: 0px; /* default */
	padding-top: 3px;
	padding-bottom: 0px;
	font-color: fontColor;
	font-style: bold;
	layout: left;
}

rightcommand extends leftcommand
{
	layout: right;
}

.itemInput{
	padding: 2;
	background-color: silver;
	border-color: gray;
	textfield-direct-input: true;
	textfield-caret-color: red;
	textfield-show-length: true;
        background-position: middle;        
        layout: expand;
        label-style: inputlabel;
        
}
.itemInput:hover {
	background-color: white;
	border-color: black;
}

.inputlabel {
    /*before: url( iconl01.png );
      text-layout: right; */
        font-color:white;
        width : 30%;
}

form{
    background-color: screenBackgroundColor;
	layout: vertical-center;
}

.itemMainBoton {
    padding: 2;
    padding-left: 9;
    padding-right: 9;
    background {
        type: round-rect;
        color: #eee;
        border-color: #fe0;
    }
    font {
        style: bold;
        size: small;
        color: #fff;
    }
    layout: expand | left;
}
 
.itemMainBoton:hover {
    background-border-color: #444;
}

.from {
	padding: 3;
	padding-left: 5;
	padding-vertical: 1;
	include-label: true;
	layout: left | expand;
	/** style of the filter-textfield of a FilteredList/FilteredChoiceGroup */
	filter-style: filterTextFieldStyle;
	/** style of the popup screen for a FileredChoiceGroup */
	popup-style: filterPopupStyle;
	background {
		type: round-rect;
		color: silver;
	}
}

.from:hover {
	padding: 3;
	padding-left: 3;
	background {
		type: round-rect;
		color: white;
	}
	layout: left | expand;	
}

.filterTextFieldStyle {
	margin-left: 2;
	margin-right: 2;
	before: url( search.png );
	background {
		color: white;
		border-color: black;
	}
	layout: expand | left;
}

.filterPopupStyle {
	repaint-previous-screen: true;
	margin: 10;
	margin-bottom: 0;
	padding: 5;
	background-color: bgColor;
}

.seleccion {
	font-color: textColor;
	/*
	layout: top;
	*/
	margin-left: 3;
	checkbox-plain: url( choice.png );
	checkbox-selected: url( choice_sel.png );
	text-horizontal-adjustment: 2;
}

.seleccion:hover {
	font-color: joeyGreen;
	checkbox-plain: url( choice_f.png );
	checkbox-selected: url( choice_sel_f.png );
}

.mailForm {
	padding: 5;
	padding-left: 5;
	padding-right: 5;
	background-color: black;
	layout: horizontal-expand | horizontal-center | top;
	//#if !polish.useScrollBar
		scrollindicator-up-image: url( arrow-up.png );
		scrollindicator-down-image: url( arrow-down.png );
	//#endif
	//#if polish.midp2
		screen-change-animation: fade;
	//#endif
	//#if polish.api.mmapi
		title-style: .mailFormTitle;
	//#endif
}

.mailAlert extends .mailForm {
	title-style: none;
	margin-right: 10;
	margin-left: 10;
	padding-left: 5;
	padding-right: 5;
	layout: horizontal-center | vertical-center | horizontal-shrink | vertical-shrink;
	repaint-previous-screen: true;
	//#if polish.midp2 || polish.api.nokia-ui
		border {
			type: drop-shadow;
			width: 6;
			inner-color: #aff0;
			outer-color: #2002;
			orientation: top-right;
		}
	//#endif
	//#if polish.midp2
		screen-change-animation: fade;
	//#endif
	background-color: green;
}

.esperaAlert extends .mailForm {
	title-style: none;
	margin-right: 10;
	margin-left: 10;
	padding-left: 10;
	padding-right: 10;
        padding-top: 10;
        padding-bottom: 10;
	layout: horizontal-center | vertical-center;
	repaint-previous-screen: true;
	//#if polish.midp2 || polish.api.nokia-ui
		border {
			type: drop-shadow;
			width: 6;
			inner-color: #aff0;
			outer-color: #2002;
			orientation: top-right;
		}
	//#endif
	//#if polish.midp2
		screen-change-animation: fade;
	//#endif
	background-color: green;
}
alertcontent {
	font-color: white;
}

.busyIndicator {    
    gauge-gap-color : red;
    gauge-value-align: center;
    view-type: gauge-cycling-icons;    
    gauge-cycling-icons-image: url( red.png );
    gauge-cycling-icons-highlight-image: url( yellow.png );
    gauge-cycling-icons-highlight-center-image: url( green.png );
    gauge-cycling-icons-count: 10;
    gauge-cycling-icons-highlight-count: 3;
    label-style: milabelstile;
}

.milabelstile{
    
    font-color:white;
}